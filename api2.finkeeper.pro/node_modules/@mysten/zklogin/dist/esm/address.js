import { computeZkLoginAddressFromSeed } from "@mysten/sui/zklogin";
import { decodeJwt } from "jose";
import { genAddressSeed } from "./utils.js";
const MAX_HEADER_LEN_B64 = 248;
const MAX_PADDED_UNSIGNED_JWT_LEN = 64 * 25;
function lengthChecks(jwt) {
  const [header, payload] = jwt.split(".");
  if (header.length > MAX_HEADER_LEN_B64) {
    throw new Error(`Header is too long`);
  }
  const L = (header.length + 1 + payload.length) * 8;
  const K = (512 + 448 - (L % 512 + 1)) % 512;
  const padded_unsigned_jwt_len = (L + 1 + K + 64) / 8;
  if (padded_unsigned_jwt_len > MAX_PADDED_UNSIGNED_JWT_LEN) {
    throw new Error(`JWT is too long`);
  }
}
function jwtToAddress(jwt, userSalt) {
  lengthChecks(jwt);
  const decodedJWT = decodeJwt(jwt);
  if (!decodedJWT.sub || !decodedJWT.iss || !decodedJWT.aud) {
    throw new Error("Missing jwt data");
  }
  if (Array.isArray(decodedJWT.aud)) {
    throw new Error("Not supported aud. Aud is an array, string was expected.");
  }
  return computeZkLoginAddress({
    userSalt,
    claimName: "sub",
    claimValue: decodedJWT.sub,
    aud: decodedJWT.aud,
    iss: decodedJWT.iss
  });
}
function computeZkLoginAddress({
  claimName,
  claimValue,
  iss,
  aud,
  userSalt
}) {
  return computeZkLoginAddressFromSeed(genAddressSeed(userSalt, claimName, claimValue, aud), iss);
}
export {
  MAX_HEADER_LEN_B64,
  MAX_PADDED_UNSIGNED_JWT_LEN,
  computeZkLoginAddress,
  jwtToAddress,
  lengthChecks
};
//# sourceMappingURL=address.js.map
