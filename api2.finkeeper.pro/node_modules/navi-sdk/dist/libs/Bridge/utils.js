"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForSolanaTransaction = waitForSolanaTransaction;
function waitForSolanaTransaction(connection_1, txSignature_1) {
    return __awaiter(this, arguments, void 0, function* (connection, txSignature, commitment = "confirmed", timeoutMs = 60000) {
        console.log(`等待交易完成，交易签名: ${txSignature}`);
        const startTime = Date.now();
        while (true) {
            // 检查超时
            if (Date.now() - startTime > timeoutMs) {
                throw new Error(`等待交易超时: ${txSignature}`);
            }
            // 查询交易确认状态
            const result = yield connection.getSignatureStatus(txSignature, {
                searchTransactionHistory: true,
            });
            const status = result.value;
            if (status) {
                if (status.confirmationStatus === commitment ||
                    status.confirmations === null) {
                    if (status.err) {
                        console.error("交易失败:", status.err);
                        throw new Error("交易失败");
                    }
                    console.log("交易已确认!");
                    return;
                }
            }
            yield new Promise((resolve) => setTimeout(resolve, 1000));
        }
    });
}
