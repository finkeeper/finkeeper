from config import LLM_PROVIDER
from services.atoma import ask_atoma
from services.chatgpt import ask_chatgpt
import json

PORTFOLIO_KEYWORDS = ["–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "–ø–æ—Ä—Ç—Ñ–µ–ª—å", "portfolio", "analysis", "assets analysis", "investment", "holdings", "crypto assets"]


def analyze_portfolio(portfolio: dict) -> dict:
    """üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ Atoma"""

    portfolio_json = json.dumps(portfolio, ensure_ascii=False, indent=2)

    # üìù **–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Atoma (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ JSON)**
    portfolio_analysis_prompt = (
        f"Analyze this crypto asset portfolio:\n\n{portfolio_json}\n\n"
        "Provide a structured analysis with clear sections and use emojis to improve readability. Use the following format:\n\n"
        "### 1Ô∏è‚É£ Diversification üåç\n"
        "- List blockchains, exchanges, and wallets used.\n"
        "- Highlight the main blockchain where most assets are stored.\n\n"
        "### 2Ô∏è‚É£ Risks ‚ö†Ô∏è\n"
        "- Mention any over-concentration of assets.\n"
        "- Identify any missing diversification.\n\n"
        "### 3Ô∏è‚É£ Stablecoins üí∞\n"
        "- Total stablecoins in the portfolio.\n"
        "- Estimated monthly passive income at 10% APY.\n\n"
        "### 4Ô∏è‚É£ Summary üöÄ\n"
        "- Key takeaways.\n"
        "- Recommendations for improving portfolio balance.\n\n"
        "Ensure the response follows this format **exactly** and uses **bold text for key data**."
        )



    portfolio_analysis_response = ask_atoma(portfolio_analysis_prompt)
    #portfolio_analysis_response = ask_chatgpt(portfolio_analysis_prompt)

    print(f"üîç [DEBUG] Atoma Response: {portfolio_analysis_response}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Atoma

    return portfolio_analysis_response  # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞–∫ –µ—Å—Ç—å





def ask_llm(user_input: str, portfolio: dict = None) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""

    # üîç **1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**
    print(f"‚úÖ [ask_llm] –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {user_input}")
    print(f"üìä [ask_llm] –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {json.dumps(portfolio, indent=2, ensure_ascii=False)}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ JSON

    # üîç **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**
    if any(keyword.lower() in user_input.lower() for keyword in ["–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "portfolio", "assets analysis"]):
        if portfolio:
            analysis_text = analyze_portfolio(portfolio)
            return analysis_text
        return "‚ö†Ô∏è No portfolio data provided. Please send your crypto portfolio for analysis."



    

    # üîç **–ó–∞–ø—Ä–æ—Å –∫ Atoma –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ SUI **
    atoma_check_prompt = f"–ù–∞–π–¥–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_input}' —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º SUI (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞—Ç—å, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, send, tranfer, move). " \
                         "–ù–ï –ù–£–ñ–ù–û –ù–ò–ö–ê–ö –†–ê–°–°–£–ñ–î–ï–ù–ò–ô, –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON:\n\n" \
                         '{"function": {"function": 1, "name": "transfer"}}' \
                         "\n\n–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ JSON: {}"

    atoma_check_response = ask_chatgpt(atoma_check_prompt)

    try:
        atoma_data = json.loads(atoma_check_response)
    except json.JSONDecodeError:
        atoma_data = {}

    # ‚úÖ **–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞**
    if "function" in atoma_data:
        atoma_check_prompt2 = (
            f"–ù–∞–π–¥–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_input}' —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (amount) –∏ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (address). "
            "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ –∞–¥—Ä–µ—Å ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω-–∞–¥—Ä–µ—Å. "
            "–ù–ï –ù–£–ñ–ù–û –ù–ò–ö–ê–ö –†–ê–°–°–£–ñ–î–ï–ù–ò–ô, –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            '{"function": 1, "name": "transfer", "amount": 100, "address": "0x123456789abcdef"}'
            '\n\n–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON: {"function": 1, "name": "transfer"}'
        )

        atoma_check_response2 = ask_chatgpt(atoma_check_prompt2)
        
        try:
            atoma_data2 = json.loads(atoma_check_response2)
        except json.JSONDecodeError:
            atoma_data2 = {}
        
        return {
            "response": "‚ö° Find transfer SUI comand. Specify address and amount.",
            # "function": atoma_check_response2 
            "function": atoma_data2
        }


    # ‚úÖ **Find DEPOSIT TO NAVI promt**

    atoma_check_deposit_prompt = (
        f"Identify if the user request '{user_input}' contains words related to depositing SUI "
        "(e.g., deposit, stake, transfer, navi, earn on, lend, income, earn from, yield, generate income with or similar). "
        "Do not provide any reasoning. If a deposit command is detected, return only this JSON:\n\n"
        '{"function": {"function": 2, "name": "deposit", "amount": "NUMBER_HERE"}}\n\n'
        "Replace NUMBER_HERE with the detected deposit amount. If no amount is found, set it to null.\n\n"
        "If no deposit-related words are found, return only this JSON: {}"
    )
    
    atoma_check_response3 = ask_chatgpt(atoma_check_deposit_prompt)
    
    print(f"üîç [DEBUG] Deposit Prompt Sent: {atoma_check_deposit_prompt}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    print(f"üîç [DEBUG] Atoma Deposit Response: {atoma_check_response3}")  # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç Atoma

    try:
        atoma_data3 = json.loads(atoma_check_response3)
    except json.JSONDecodeError:
        atoma_data3 = {}
    if "function" in atoma_data3:
        return {
            "response": "‚ö° Find deposit SUI command",
            # "function": atoma_check_response2 
            "function": atoma_data3
        }
        
    # ‚úÖ **Find withdraw from NAVI promt**
    
    atoma_check_withdraw_prompt = (
        f"Identify if the user request '{user_input}' contains words related to withdrawing SUI "
        "(e.g., withdraw from navi, cash out, send, transfer out, remove, redeem, payout, claim, release, or similar). "
        "Do not provide any reasoning. If a withdrawal command is detected, return only this JSON:\n\n"
        '{"function": {"function": 3, "name": "withdraw", "amount": "NUMBER_HERE"}}\n\n'
        "Replace NUMBER_HERE with the detected withdrawal amount. If no amount is found, set it to null.\n\n"
        "If no withdrawal-related words are found, return only this JSON: {}"
        )

    
    atoma_check_response4 = ask_chatgpt(atoma_check_withdraw_prompt)
    
    print(f"üîç [DEBUG] Deposit Prompt Sent: {atoma_check_withdraw_prompt}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    print(f"üîç [DEBUG] Atoma Deposit Response: {atoma_check_response4}")  # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç Atoma

    try:
        atoma_data4 = json.loads(atoma_check_response4)
    except json.JSONDecodeError:
        atoma_data4 = {}
    if "function" in atoma_data4:
        return {
            "response": "‚ö° Find withdraw SUI command",
            # "function": atoma_check_response2 
            "function": atoma_data4
        }
    
    
    # üîÑ **–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —É Atoma/ChatGPT**
    if LLM_PROVIDER == "atoma":
        return ask_atoma(user_input)

    elif LLM_PROVIDER == "chatgpt":
        return ask_chatgpt(user_input)

    return {"error": "–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è LLM-–º–æ–¥–µ–ª—å."}
